# N개의 원소로 구성된 자연수 집합이 주어지면, 이 집합을 두 개의 부분집합으로 나누었을 때 
# 두 부분집합의 원소의 합이 서로 같은 경우가 존재하면 “YES"를 출력하고, 그렇지 않으면 ”NO"를 출력하는 프로그램을 작성하세요.
# 둘로 나뉘는 두 부분집합은 서로소 집합이며, 두 부분집합을 합하면 입력으로 주어진 원래의 집합이 되어 합니다.
# 예를 들어 {1, 3, 5, 6, 7, 10}이 입력되면 {1, 3, 5, 7} = {6, 10} 으로 두 부분집합의 합이 16으로 같은 경우가 존재하는 것을 알 수 있다.

import sys

def DFS(v):
    global s
    if s > total // 2: return # 시간 복잡도를 줄이기 위해 사용, 부분 집합의 합이 원소 총 합의 절반을 넘어버리는 경우 합이 같은 서로소 집합을 만들 수 없으므로 return
    # 레벨이 -1일 경우
    if v == -1:
        # 두 부분 집합의 합이 같다면, 두 부분 집합은 합이 같은 서로소 집합이다
        if s == total - s:
            print("YES")
            sys.exit(0) # 프로그램 종료
    else:
        s += num[v]
        DFS(v-1) # 레벨 v(인덱스)의 값을 가지는 경우
        s -= num[v]
        DFS(v-1) # 레벨 v(인덱스)의 값을 가지지 않는 경우

sys.stdin = open("in5.txt", 'r')

n = int(input())
num = list(map(int, input().split()))

s = 0 # 부분 집합의 합
total = sum(num) # 리스트 원소 총 합

DFS(n-1)
print("NO") # 프로그램이 종료되지 않았다면 합이 같은 부분집합이 없는 것이므로 NO 출력
